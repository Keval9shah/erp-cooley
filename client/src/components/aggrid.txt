<script setup lang="ts">
import { ref, computed } from 'vue';
// ... other imports ...

// Define possible filter states
type FilterState = 'all' | 'slitter' | 'noSlitter';

// Reactive state for the current filter
const currentFilterState = ref<FilterState>('all');
const showDropdown = ref(false); // To control dropdown visibility

// Computed property for displaying the current filter text
const filterButtonText = computed(() => {
  switch (currentFilterState.value) {
    case 'all': return 'All Jobs';
    case 'slitter': return 'Slitter Only';
    case 'noSlitter': return 'No Slitter';
    default: return 'Filter Jobs'; // Fallback
  }
});

// Function to apply AG-Grid filter based on currentFilterState
function applyGridFilter() {
  let filterModel: any = null; // Default to no filter
  if (currentFilterState.value === 'slitter') {
    filterModel = {
      assignedMachine: {
        type: 'contains',
        filter: 'SLITTER',
        filterType: 'text',
      },
    };
  } else if (currentFilterState.value === 'noSlitter') {
    filterModel = {
      assignedMachine: {
        type: 'notContains',
        filter: 'SLITTER',
        filterType: 'text',
      },
    };
  }
  gridApi.value?.setFilterModel(filterModel);
  // Also good practice to ensure columns are autosized after filter change if needed
  // gridApi.value?.autoSizeAllColumns(true); // Call your resizeCells function here if necessary
  resizeCells(); // Assuming this auto-sizes and applies specific widths
}

// Handler for clicking the main part of the button (cycles through options)
function cycleFilterOptions() {
  if (currentFilterState.value === 'all') {
    currentFilterState.value = 'slitter';
  } else if (currentFilterState.value === 'slitter') {
    currentFilterState.value = 'noSlitter';
  } else {
    currentFilterState.value = 'all';
  }
  applyGridFilter(); // Apply the new filter
  showDropdown.value = false; // Close dropdown if open
}

// Handler for direct selection from dropdown
function selectFilterOption(option: FilterState) {
  currentFilterState.value = option;
  applyGridFilter(); // Apply the new filter
  showDropdown.value = false; // Close the dropdown
}

// Toggle dropdown visibility
function toggleDropdown() {
  showDropdown.value = !showDropdown.value;
}

// Close dropdown when clicking outside
function closeDropdown(event: MouseEvent) {
  const target = event.target as HTMLElement;
  const filterButton = document.getElementById('contextual-filter-button');
  const filterDropdown = document.getElementById('filter-dropdown-menu');

  if (filterButton && !filterButton.contains(target) &&
      filterDropdown && !filterDropdown.contains(target)) {
    showDropdown.value = false;
  }
}

// Add event listener on component mount
import { onMounted, onUnmounted } from 'vue';
onMounted(() => {
  document.addEventListener('click', closeDropdown);
});
onUnmounted(() => {
  document.removeEventListener('click', closeDropdown);
});

// ... rest of your existing script setup ...
</script>

<template>
  <div class="ag-grid-tab">
    <div class="ag-grid-tab-header">
      <button @click="openModal">Add/Update Data</button>
      <button class="hamburger-menu" @click="onHamburgerClick">&#9776;</button>

      <div class="contextual-filter-container">
        <button
          id="contextual-filter-button"
          class="contextual-filter-button"
          @click="cycleFilterOptions"
          :class="{ 'dropdown-active': showDropdown }"
        >
          <span class="filter-text">{{ filterButtonText }}</span>
          <span class="dropdown-arrow" @click.stop="toggleDropdown">â–¼</span>
        </button>

        <div v-if="showDropdown" id="filter-dropdown-menu" class="filter-dropdown-menu">
          <button @click="selectFilterOption('all')" :class="{ 'active': currentFilterState === 'all' }">All Jobs</button>
          <button @click="selectFilterOption('slitter')" :class="{ 'active': currentFilterState === 'slitter' }">Slitter Only</button>
          <button @click="selectFilterOption('noSlitter')" :class="{ 'active': currentFilterState === 'noSlitter' }">No Slitter</button>
          <hr v-if="true"> <button>Another Option</button>
          <button>Yet Another</button>
        </div>
      </div>
      </div>

    <div v-if="showModal" class="modal-overlay">
      </div>

    <div class="ag-theme-alpine">
      <AgGridVue
        class="ag-grid"
        :theme="'legacy'"
        :rowData="rowData"
        :grid-options="gridOptions"
      />
    </div>
  </div>
</template>

<style scoped>
/* Add these styles to your existing <style scoped> block */

.ag-grid-tab-header {
  display: flex;
  justify-content: flex-end; /* Pushes buttons to the right */
  align-items: center;
  gap: 10px; /* Space between buttons */
  padding: 10px 0; /* Add some padding */
}

/* Contextual Filter Button Styling */
.contextual-filter-container {
  position: relative; /* For dropdown positioning */
  display: inline-block;
  z-index: 100; /* Ensure it's above the grid */
}

.contextual-filter-button {
  background-color: #333; /* Darker background */
  color: #fff;
  border: 1px solid #555;
  border-radius: 4px;
  padding: 8px 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
}

.contextual-filter-button:hover {
  background-color: #444;
  border-color: #777;
}

.contextual-filter-button.dropdown-active {
  background-color: #007bff; /* Highlight when dropdown is open */
  border-color: #007bff;
}

.filter-text {
  flex-grow: 1; /* Allows text to take available space */
  margin-right: 8px; /* Space between text and arrow */
  white-space: nowrap; /* Prevent text wrapping */
  overflow: hidden;
  text-overflow: ellipsis;
  transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out; /* For text fade/slide animation */
}

.dropdown-arrow {
  font-size: 0.8em;
  line-height: 1;
  transform: rotate(0deg); /* Initial state */
  transition: transform 0.2s ease-in-out; /* Animation for arrow rotation */
}

.contextual-filter-button.dropdown-active .dropdown-arrow {
  transform: rotate(180deg); /* Rotate when dropdown is active */
}

/* Dropdown Menu Styling */
.filter-dropdown-menu {
  position: absolute;
  top: 100%; /* Position below the button */
  left: 0;
  background-color: #333;
  border: 1px solid #555;
  border-radius: 4px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  min-width: 150px; /* Adjust as needed */
  padding: 5px 0;
  z-index: 200; /* Above contextual button */
  display: flex;
  flex-direction: column;
  /* Optional: Add slide-down/fade-in animation */
  animation: fadeIn 0.2s ease-out;
}

.filter-dropdown-menu button {
  background: none;
  border: none;
  color: #fff;
  padding: 8px 15px;
  text-align: left;
  width: 100%;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.filter-dropdown-menu button:hover {
  background-color: #555;
}

.filter-dropdown-menu button.active {
  background-color: #007bff; /* Highlight active option in dropdown */
  color: #fff;
}

.filter-dropdown-menu hr {
  border: none;
  border-top: 1px solid #555;
  margin: 5px 0;
}

/* Basic fade-in animation for dropdown */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-5px); }
  to { opacity: 1; transform: translateY(0); }
}

/* Existing styles */
.ag-grid {
  width: 100%;
  height: 100%;
}
/* ... rest of your modal and other styles ... */
</style>